{"idModule":"73","name":"Google","description":"This module allows you to connect Gladys to Google API like Google calendars for example.","slug":"google","createdAt":"2017-01-30 22:58:58","Developer":"Admin","version":"0.1.0","instructionsHTML":"<p>Needs Gladys &gt;= 3.4</p>\n<h4>Setup</h4>\n<ul>\n<li>Visit <a href=\"https://console.developers.google.com/project\">Google Developpers Console</a></li>\n<li>Click <strong>CREATE PROJECT</strong></li>\n<li>Enter a <em>Project Name</em> (for example &quot;Gladys&quot;) , then click <strong>CREATE</strong></li>\n<li>On the dashboard, click under <strong>API Google Apps</strong> on <strong>Calendar API</strong>, then <strong>Activate</strong> this API so your project will have access to Google Calendar API. </li>\n<li>Then select <em>APIs &amp; auth</em> from the sidebar and click on <em>Credentials</em> tab</li>\n<li>Click <strong>CREATE NEW CLIENT ID</strong> button :\n<ul>\n<li><strong>Application Type</strong>: Other</li>\n<li><strong>Name</strong> : Gladys for example</li>\n</ul></li>\n<li>\n<p>Copy past the client ID and the client secret</p>\n</li>\n<li>Go to Gladys, and install the google module</li>\n<li>Go to parameters, then tabs &quot;Parameters&quot;, then create 3 Params :\n<ul>\n<li><strong>GOOGLE_API_CLIENT_ID</strong> : The client ID you copy pasted before</li>\n<li><strong>GOOGLE_API_CLIENT_SECRET</strong> : Ths client secret</li>\n<li><strong>GOOGLE_API_REDIRECT_URL</strong>: urn:ietf:wg:oauth:2.0:oob</li>\n</ul></li>\n<li>\n<p>Then reboot Gladys</p>\n</li>\n<li>Create a script in Gladys, with the following code :</li>\n</ul>\n<pre><code class=\"language-javascript\">gladys.modules.google.getRedirectUrl().then(console.log).catch(console.log);</code></pre>\n<ul>\n<li>Then, go to Gladys logs on your Raspberry Pi (Type : <code>pm2 logs gladys</code>), you should see an<br />\nurl starting with &quot;https://accounts.google.com/o/oauth2/auth?access_type=offline&quot;. </li>\n<li>Copy paste this URL in your browser, and connect to your Google account. It should give you a code. Copy paste this code.</li>\n<li>In Gladys, go to the dashboard, and create a script with the following code :</li>\n</ul>\n<pre><code class=\"language-javascript\">gladys.modules.google.authenticate('YOUR CODE', {id: YOUR_USER_ID});</code></pre>\n<p>(to find your user ID, go to &quot;Parameters&quot; =&gt; &quot;My Account&quot; in Gladys)</p>\n<ul>\n<li>Then, to simply do a first synchronization, execute the following script :</li>\n</ul>\n<pre><code class=\"language-javascript\">gladys.modules.google.calendar.sync().then(console.log).catch(console.log);</code></pre>\n<p>You should see in Gladys logs all calendars synced.</p>\n<p>Congrats !</p>\n<h4>Usage</h4>\n<p>I recommend to sync your calendars a first time with either a script, or by clicking on the &quot;configuration&quot; button<br />\n(Clicking on &quot;configuration&quot; simply start a sync).</p>\n<p>Then, you can create a cron schedule telling &quot;Every 30 minutes&quot; =&gt; sync in Gladys.</p>\n<ul>\n<li>First, create an alarm in &quot;Alarms&quot;. Create a cron rule with the following rule : &quot;0 0,30 <em> </em> <em> </em>&quot;.</li>\n<li>Then create a scenario with this alarm selected, and put in action &quot;Sync calendars&quot;.</li>\n</ul>\n<p>If the action does not exist, go to parameters and update Gladys data.</p>","instructionsMarkDown":"Needs Gladys >= 3.4\n\n#### Setup\n\n- Visit [Google Developpers Console](https://console.developers.google.com/project)\n- Click **CREATE PROJECT**\n- Enter a *Project Name* (for example \"Gladys\") , then click **CREATE**\n- On the dashboard, click under **API Google Apps** on **Calendar API**, then **Activate** this API so your project will have access to Google Calendar API. \n- Then select *APIs & auth* from the sidebar and click on *Credentials* tab\n- Click **CREATE NEW CLIENT ID** button :\n - **Application Type**: Other\n - **Name** : Gladys for example\n- Copy past the client ID and the client secret\n\n- Go to Gladys, and install the google module\n- Go to parameters, then tabs \"Parameters\", then create 3 Params :\n  - **GOOGLE_API_CLIENT_ID** : The client ID you copy pasted before\n  - **GOOGLE_API_CLIENT_SECRET** : Ths client secret\n  - **GOOGLE_API_REDIRECT_URL**: urn:ietf:wg:oauth:2.0:oob\n- Then reboot Gladys\n\n- Create a script in Gladys, with the following code :\n\n```javascript\ngladys.modules.google.getRedirectUrl().then(console.log).catch(console.log);\n```\n\n- Then, go to Gladys logs on your Raspberry Pi (Type : `pm2 logs gladys`), you should see an \nurl starting with \"https://accounts.google.com/o/oauth2/auth?access_type=offline\". \n- Copy paste this URL in your browser, and connect to your Google account. It should give you a code. Copy paste this code.\n- In Gladys, go to the dashboard, and create a script with the following code :\n\n```javascript\ngladys.modules.google.authenticate('YOUR CODE', {id: YOUR_USER_ID});\n```\n\n(to find your user ID, go to \"Parameters\" => \"My Account\" in Gladys)\n\n- Then, to simply do a first synchronization, execute the following script :\n\n```javascript\ngladys.modules.google.calendar.sync().then(console.log).catch(console.log);\n```\n\nYou should see in Gladys logs all calendars synced.\n\nCongrats !\n\n#### Usage\n\nI recommend to sync your calendars a first time with either a script, or by clicking on the \"configuration\" button\n(Clicking on \"configuration\" simply start a sync).\n\nThen, you can create a cron schedule telling \"Every 30 minutes\" => sync in Gladys.\n\n- First, create an alarm in \"Alarms\". Create a cron rule with the following rule : \"0 0,30 * * * *\".\n- Then create a scenario with this alarm selected, and put in action \"Sync calendars\".\n\nIf the action does not exist, go to parameters and update Gladys data.","link":"https://github.com/gladysassistant/gladys-google","img":"bd93f14a-9e97-4e46-aed5-3bfeeea153d6.jpg","note":null,"nbNotes":"0"}