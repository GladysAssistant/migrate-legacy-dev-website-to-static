{"idModule":"111","name":"EnOcean","description":"Gladys hooks to control EnOcean wireless devices.\nControl your temperature or motion, then run actions on events.","slug":"enocean","createdAt":"2017-11-16 18:30:43","Developer":"Andro","version":"0.0.1","instructionsHTML":"<h2>Installation</h2>\n<ul>\n<li>Plug your EnOcean USB stick on your Raspberry Pi</li>\n<li>Find the name of the USB port where the stick is connected to (it looks like <code>/dev/ttyACM0</code>, you can rename through udev rules).<br />\nYou can try to execute <code>ls /dev/tty*</code> before and after pluggging the USB stick to find which port it is.</li>\n<li>Create a parameter in Gladys by going to &quot;Parameters&quot; =&gt; &quot;Parameters&quot;, and create : </li>\n</ul>\n<p>Key : enocean_usb_port<br />\nValue : THE_USB_PORT_NAME_YOU_FOUND</p>\n<ul>\n<li>Install the module in Gladys in the store view.</li>\n<li>Reboot Gladys</li>\n</ul>\n<h2>Usage</h2>\n<h4>How to learn device</h4>\n<ul>\n<li><strong>Learning mode</strong> is automatically set for <strong>60s</strong> at Gladys Startup</li>\n<li>To manually set the <strong>learning mode</strong>, go to <strong>Modules</strong> and click on the <strong>Configuration</strong> button on the EnOcean module row, it will put the stick in <strong>Learning</strong> mode during <strong>60s</strong>.</li>\n<li>You can also learn new devices <strong>by hand</strong>, through a Gladys script :</li>\n</ul>\n<pre><code class=\"language-sh\">$ gladys.modules.enocean.learn({\n   id: \"your device id\",\n   eep: \"your device eep\",\n   manufacturer: \"manufacturer- not mandatory\",\n   desc: \"the name you want to give for your device\"\n})</code></pre>\n<ul>\n<li>\n<p>You can remove/forget a device by script:</p>\n<pre><code class=\"language-sh\">$ gladys.modules.enocean.forget(\"your device id\")</code></pre>\n</li>\n</ul>\n<h4>How devices works</h4>\n<ul>\n<li>\n<p>Each EnOcean device state is mapped to an integer value in Gladys (as Gladys works with Int).<br />\nopen : 1<br />\nclosed : 0<br />\non : 1<br />\noff : 0<br />\nA0 : 1<br />\nA1 : 2<br />\nB0 : 3<br />\nB1 : 4<br />\nreleased : 5</p>\n</li>\n<li>Devices currently supported:<br />\na5-07-01<br />\na5-02-05<br />\nd5-00-01<br />\nf6-02-03<br />\nd2-xx-xx (partially)</li>\n</ul>\n<p>Others devices may works. It's based on node-enocean which support a lot of equipments.<br />\nI've just tested with mine.</p>\n<p>If you have any devices which does not work, don't hesitate to open an issue so we'll work to add support</p>\n<h4>To use an actuator device like this one:</h4>\n<p>http://nodon.fr/enocean/module-encastre-enocean-1-canal_16-1</p>\n<ul>\n<li>You have to bind the device with Gladys in order to control it (2-ways learning):\n<ul>\n<li>Learn the device in Gladys <strong>(learn the device on Gladys side)</strong></li>\n<li>Put the device in learning state by following the method</li>\n<li>Send a <strong>On</strong> order to the device, it will bind the device to Gladys <strong>(learn Gladys on device side)</strong></li>\n</ul></li>\n</ul>\n<pre><code class=\"language-sh\">$ gladys.deviceType.exec({\n   id: \"your device id\",\n   value: 1 // means A0\n})</code></pre>\n<p>Be carefull to send a <strong>On value</strong> (ie: A0), if you send a <strong>Off value</strong> (A1) it will bind the device in the wrong way.</p>","instructionsMarkDown":"## Installation\n\n- Plug your EnOcean USB stick on your Raspberry Pi\n- Find the name of the USB port where the stick is connected to (it looks like `/dev/ttyACM0`, you can rename through udev rules). \nYou can try to execute `ls /dev/tty*` before and after pluggging the USB stick to find which port it is.\n- Create a parameter in Gladys by going to \"Parameters\" => \"Parameters\", and create : \n\nKey : enocean_usb_port \nValue : THE_USB_PORT_NAME_YOU_FOUND\n\n- Install the module in Gladys in the store view.\n- Reboot Gladys\n\n\n## Usage\n\n#### How to learn device\n-  **Learning mode** is automatically set for **60s** at Gladys Startup\n-  To manually set the **learning mode**, go to **Modules** and click on the **Configuration** button on the EnOcean module row, it will put the stick in **Learning** mode during **60s**.\n- You can also learn new devices **by hand**, through a Gladys script :\n\n```sh\n$ gladys.modules.enocean.learn({\n   id: \"your device id\",\n   eep: \"your device eep\",\n   manufacturer: \"manufacturer- not mandatory\",\n   desc: \"the name you want to give for your device\"\n})\n```\n\n- You can remove/forget a device by script:\n\n ```sh\n$ gladys.modules.enocean.forget(\"your device id\")\n```\n\n#### How devices works\n\n- Each EnOcean device state is mapped to an integer value in Gladys (as Gladys works with Int).\n  open : 1\n  closed : 0\n  on : 1\n  off : 0\n  A0 : 1\n  A1 : 2\n  B0 : 3\n  B1 : 4\n  released : 5\n\n- Devices currently supported:\n  a5-07-01\n  a5-02-05\n  d5-00-01\n  f6-02-03\n  d2-xx-xx (partially)\n\nOthers devices may works. It's based on node-enocean which support a lot of equipments.\nI've just tested with mine.\n\nIf you have any devices which does not work, don't hesitate to open an issue so we'll work to add support\n\n#### To use an actuator device like this one:\nhttp://nodon.fr/enocean/module-encastre-enocean-1-canal_16-1\n\n - You have to bind the device with Gladys in order to control it (2-ways learning):\n   - Learn the device in Gladys __(learn the device on Gladys side)__\n   - Put the device in learning state by following the method\n   - Send a **On** order to the device, it will bind the device to Gladys __(learn Gladys on device side)__\n\n```sh\n$ gladys.deviceType.exec({\n   id: \"your device id\",\n   value: 1 // means A0\n})\n```\nBe carefull to send a **On value** (ie: A0), if you send a **Off value** (A1) it will bind the device in the wrong way.","link":"https://github.com/jean-philipped/gladys-enocean","img":"1cf3a3bf-eee2-4c30-bcc9-7853b3e5aad5.jpg","note":null,"nbNotes":"0"}